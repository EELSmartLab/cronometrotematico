{"ast":null,"code":"var _jsxFileName = \"/home/duda/Trybe/cronometro/cronometro/src/Chronometer.js\";\nimport React from 'react';\nimport './Chronometer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chronometer extends React.Component {\n  constructor() {\n    super();\n\n    this.changeState = ({\n      target\n    }) => {\n      const {\n        name\n      } = target;\n      const value = !target.value ? '00' : target.value;\n      this.setState({\n        [name]: this.convertString(value).length === 2 ? this.convertString(value) : `0${this.convertString(value)}`,\n        update: false\n      });\n    };\n\n    this.stopChronometer = () => {\n      clearInterval(this.interval);\n    };\n\n    this.clearChronometer = () => {\n      this.setState({\n        seconds: '00',\n        minutes: '00',\n        hour: '00'\n      });\n    };\n\n    this.changeChronometer = () => {\n      this.interval = setInterval(() => {\n        console.log('aqui');\n        this.setState(state => ({\n          seconds: parseInt(state.seconds) == 0 ? '00' : this.convertSubtraiString(state.seconds).length === 2 ? this.convertSubtraiString(state.seconds) : `0${this.convertSubtraiString(state.seconds)}`,\n          update: true\n        }));\n      }, 1000);\n    };\n\n    this.state = {\n      seconds: '00',\n      minutes: '00',\n      hour: '00',\n      update: false\n    };\n  }\n\n  convertString(element) {\n    return parseInt(element).toString();\n  }\n\n  convertSubtraiString(element) {\n    return (parseInt(element) - 1).toString();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.update) {\n      if (prevState.seconds === '00' && prevState.minutes === '00' && prevState.hour === '00') {\n        this.setState({\n          seconds: '00',\n          minutes: '00',\n          hour: '00'\n        });\n        clearInterval(this.interval);\n      } else if (prevState.seconds === '00' && prevState.minutes === '00') {\n        this.setState(state => ({\n          seconds: '59',\n          minutes: '59',\n          hour: (parseInt(state.minutes) - 1).toString()\n        }));\n      } else if (prevState.seconds === '00') {\n        this.setState(state => ({\n          seconds: '59',\n          minutes: this.convertSubtraiString(state.minutes).length === 2 ? this.convertSubtraiString(state.minutes) : `0${this.convertSubtraiString(state.minutes)}`,\n          hour: '00'\n        }));\n      }\n    }\n  }\n\n  render() {\n    const {\n      seconds,\n      minutes,\n      hour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chronometer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${hour}:${minutes}:${seconds}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeChronometer,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stopChronometer,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearChronometer,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"hour\",\n          type: \"number\",\n          onChange: this.changeState,\n          min: \"0\",\n          max: \"24\",\n          placeholder: \"hour\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"minutes\",\n          type: \"number\",\n          onChange: this.changeState,\n          min: \"0\",\n          max: \"59\",\n          placeholder: \"minutes\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"seconds\",\n          type: \"number\",\n          onChange: this.changeState,\n          min: \"0\",\n          max: \"59\",\n          placeholder: \"seconds\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"minutes\",\n          type: \"button\",\n          onClick: this.changeState,\n          value: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"minutes\",\n          type: \"button\",\n          onClick: this.changeState,\n          value: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"minutes\",\n          type: \"button\",\n          onClick: this.changeState,\n          value: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Chronometer;","map":{"version":3,"sources":["/home/duda/Trybe/cronometro/cronometro/src/Chronometer.js"],"names":["React","Chronometer","Component","constructor","changeState","target","name","value","setState","convertString","length","update","stopChronometer","clearInterval","interval","clearChronometer","seconds","minutes","hour","changeChronometer","setInterval","console","log","state","parseInt","convertSubtraiString","element","toString","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Chronometer.css'\n\nclass Chronometer extends React.Component {\n  constructor(){\n    super();\n    \n    this.state = {\n      seconds: '00',\n      minutes: '00',\n      hour: '00',\n      update: false,\n    }\n  }\n\n  convertString(element){\n    return (parseInt(element)).toString();\n  }\n\n  changeState = ({ target }) => {\n    const { name } = target;\n    const value = !target.value ? '00': target.value;\n    this.setState({\n      [name]: this.convertString(value).length === 2 ? this.convertString(value) : (`0${this.convertString(value)}`),\n      update: false,\n  });\n  }\n\n  convertSubtraiString(element){\n    return (parseInt(element)-1).toString();\n  }\n\n  stopChronometer = () => {\n    clearInterval(this.interval);\n  }\n\n  clearChronometer = () => {\n    this.setState({\n      seconds: '00',\n      minutes: '00',\n      hour: '00',\n  });\n  }\n\n  changeChronometer = () => {\n    this.interval = setInterval(() => {\n    console.log('aqui')\n    this.setState((state) => ({\n      seconds: parseInt(state.seconds) == 0 ? '00' : (this.convertSubtraiString(state.seconds).length === 2 ? this.convertSubtraiString(state.seconds) : (`0${this.convertSubtraiString(state.seconds)}`)),\n      update: true,\n    }));\n  }, 1000);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.update){\n      if( prevState.seconds === '00' && prevState.minutes === '00' && prevState.hour === '00'){\n        this.setState({\n          seconds: '00',\n          minutes: '00',\n          hour: '00',\n      });\n        clearInterval(this.interval);\n      }\n      else if( prevState.seconds === '00' && prevState.minutes === '00'){\n        this.setState((state) => ({\n          seconds: '59',\n          minutes: '59',\n          hour: (parseInt(state.minutes) -1).toString(),\n      }));\n      }\n      else if( prevState.seconds === '00'){\n        this.setState((state) => ({\n          seconds: '59',\n          minutes: this.convertSubtraiString(state.minutes).length === 2 ? this.convertSubtraiString(state.minutes) : (`0${this.convertSubtraiString(state.minutes)}`),\n          hour: '00',\n      }));\n      }\n    }\n  }\n\n  render(){\n    const { seconds, minutes, hour} = this.state\n\n  return (\n    <div className=\"Chronometer\">\n      <p>{`${hour}:${minutes}:${seconds}`}</p>  \n      <button onClick={this.changeChronometer}>Play</button>\n      <button onClick={this.stopChronometer}>Stop</button>\n      <button onClick={this.clearChronometer}>Clear</button>\n      <form>\n        <input name='hour' type='number' onChange={this.changeState} min=\"0\" max=\"24\" placeholder=\"hour\" required/> \n        <input name='minutes' type='number' onChange={this.changeState} min=\"0\" max=\"59\" placeholder=\"minutes\" required/> \n        <input name='seconds' type='number' onChange={this.changeState} min=\"0\" max=\"59\" placeholder=\"seconds\" required/> \n        <input name='minutes' type='button' onClick={this.changeState} value='5'/>\n        <input name='minutes' type='button' onClick={this.changeState} value='10'/>\n        <input name='minutes' type='button' onClick={this.changeState} value='15'/>\n      </form>\n    </div>\n  );\n}\n}\n\nexport default Chronometer;\n"]},"metadata":{},"sourceType":"module"}