{"ast":null,"code":"var _jsxFileName = \"/home/duda/Trybe/cronometro/cronometro/src/Chronometer.js\";\nimport React from 'react';\nimport './Chronometer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Chronometer extends React.Component {\n  constructor() {\n    super();\n\n    this.stopChronometer = () => {\n      clearInterval(this.interval);\n    };\n\n    this.changeChronometer = () => {\n      this.interval = setInterval(() => {\n        console.log('aqui');\n        this.setState(state => ({\n          seconds: this.convertSubtraiString(state.seconds).length === 2 ? this.convertSubtraiString(state.seconds) : `0${this.convertSubtraiString(state.seconds)}`\n        }));\n      }, 1000);\n    };\n\n    this.state = {\n      seconds: '59',\n      minutes: '03',\n      hour: '00'\n    };\n  }\n\n  convertSubtraiString(element) {\n    return (parseInt(element) - 1).toString();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.seconds === '00' && prevState.minutes === '00' && prevState.hour === '00') {\n      this.setState({\n        seconds: '00',\n        minutes: '00',\n        hour: '00'\n      });\n      clearInterval(this.interval);\n    } else if (prevState.seconds === '00' && prevState.minutes === '00') {\n      this.setState(state => ({\n        seconds: '59',\n        minutes: '59',\n        hour: (parseInt(state.minutes) - 1).toString()\n      }));\n    } else if (prevState.seconds === '00') {\n      this.setState(state => ({\n        seconds: '59',\n        minutes: this.convertSubtraiString(state.minutes).length === 2 ? this.convertSubtraiString(state.minutes) : `0${this.convertSubtraiString(state.minutes)}`,\n        hour: '00'\n      }));\n    }\n  }\n\n  render() {\n    const {\n      seconds,\n      minutes,\n      hour\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chronometer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${hour}:${minutes}:${seconds}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeChronometer,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.stopChronometer,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Chronometer;","map":{"version":3,"sources":["/home/duda/Trybe/cronometro/cronometro/src/Chronometer.js"],"names":["React","Chronometer","Component","constructor","stopChronometer","clearInterval","interval","changeChronometer","setInterval","console","log","setState","state","seconds","convertSubtraiString","length","minutes","hour","element","parseInt","toString","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Chronometer.css'\n\nclass Chronometer extends React.Component {\n  constructor(){\n    super();\n    \n    this.state = {\n      seconds: '59',\n      minutes: '03',\n      hour: '00',\n    }\n  }\n\n  convertSubtraiString(element){\n    return (parseInt(element)-1).toString();\n  }\n\n  stopChronometer = () => {\n    clearInterval(this.interval);\n  }\n\n  changeChronometer = () => {\n      this.interval = setInterval(() => {\n      console.log('aqui')\n      this.setState((state) => ({\n        seconds: this.convertSubtraiString(state.seconds).length === 2 ? this.convertSubtraiString(state.seconds) : (`0${this.convertSubtraiString(state.seconds)}`),\n      }));\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if( prevState.seconds === '00' && prevState.minutes === '00' && prevState.hour === '00'){\n      this.setState({\n        seconds: '00',\n        minutes: '00',\n        hour: '00',\n    });\n      clearInterval(this.interval);\n    }\n    else if( prevState.seconds === '00' && prevState.minutes === '00'){\n      this.setState((state) => ({\n        seconds: '59',\n        minutes: '59',\n        hour: (parseInt(state.minutes) -1).toString(),\n    }));\n    }\n    else if( prevState.seconds === '00' ){\n      this.setState((state) => ({\n        seconds: '59',\n        minutes: this.convertSubtraiString(state.minutes).length === 2 ? this.convertSubtraiString(state.minutes) : (`0${this.convertSubtraiString(state.minutes)}`),\n        hour: '00',\n    }));\n    }\n  }\n\n  render(){\n    const { seconds, minutes, hour} = this.state\n\n  return (\n    <div className=\"Chronometer\">\n      <p>{`${hour}:${minutes}:${seconds}`}</p>  \n      <button onClick={this.changeChronometer}>Play</button>\n      <button onClick={this.stopChronometer}>Stop</button>\n    </div>\n  );\n}\n}\n\nexport default Chronometer;\n"]},"metadata":{},"sourceType":"module"}